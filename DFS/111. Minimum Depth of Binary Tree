# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        #BFS solultion
        #it is similar to LC104
        
        if not root:
            return 0
        left = self.minDepth(root.left)
            
        right = self.minDepth(root.right)
        
        if not left:
            return right+1
        
        if not right:
            return left+1
        
        
        return min(left,right)+1
        
++++++++++++++++++++++++++++++++++++++++++++++++++
solution 2++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        #BFS solultion
        #it is similar to LC104
        
        if not root:
            return 0
        #we need to consider the condition
        #that only one subtree exists
        #the depth is the subtree's depth
        #other than min(left,right)+1=1
        #since root is not a leaft
        
        if root.left and root.right:
            return min(self.minDepth(root.left),self.minDepth(root.right))+1
        
        else:
            #this is for the only one subtree
            return max(self.minDepth(root.left),self.minDepth(root.right))+1
